// 연결리스트
// 연결 리스트는 각 요소를 포인터 라고 부르는 화살표에 의해 한 줄로 나열한 것
// 연결 리스트를 구성하는 각 요소 : 노드
// 각 노드에는 다음 노드를 가리키는 포인터 존재

// 리스트에 더미노드로 nil을 준비
// 더미노드를 준비해두면 연결 리스트에서 삽입, 삭제 작업을 깔끔하게 구현 가능
// 이를 감시(sentinel) 노드라고 함

// 연결리스트는 배열과 다르게 자신이 전체에서 몇 번째인지에 대한 정보 없어도 앞
// 노드 정보만 알면 열 만들 수 있음 연결 리스트는 배열과 다르게 몇번째 노드라는
// 정보 관리하지 않음

// 연결리스트는 삽입, 삭제 쿼리에 적합한 자료 구조이나,
// 쿼리를 처리할 때마다 각 노드가 전체에서 몇 번째인지 등을 알려주는 정보를
// 갱신하려면 상당한 계산 시간이 필요

// 각 노드가 포인터로 연결되는 자료구조 구현하려면? 자기 참조 구조체
// (self-referencing structure)
// > 자기 자신의 자료형을 가리키는 포인터를 멤버로 가지는 구조체
// 연결 리스트의 각 노드를 자기 참조 구조체의 인스턴스로 나타냄
#include <iostream>
using namespace std;


struct Node {
  Node *next; // 다음이 어떤 노드를 가리키나
  string name; // 노드에 저장된 값

  Node(string name_ = "") :next(NULL), name(name_) { }
};

// 노드 p 직후에 노드 v 삽입
void insert(Node *v, Node *p) {
  v->next = p->next;
  p -> next = v;
}